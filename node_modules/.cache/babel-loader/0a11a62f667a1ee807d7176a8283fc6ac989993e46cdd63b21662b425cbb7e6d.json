{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport classNames from 'classnames';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport AccordionItemContext from './AccordionItemContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useAccordionButton(eventKey, onClick) {\n  _s();\n  const {\n    activeEventKey,\n    onSelect,\n    alwaysOpen\n  } = useContext(AccordionContext);\n  return e => {\n    /*\n      Compare the event key in context with the given event key.\n      If they are the same, then collapse the component.\n    */\n    let eventKeyPassed = eventKey === activeEventKey ? null : eventKey;\n    if (alwaysOpen) {\n      if (Array.isArray(activeEventKey)) {\n        if (activeEventKey.includes(eventKey)) {\n          eventKeyPassed = activeEventKey.filter(k => k !== eventKey);\n        } else {\n          eventKeyPassed = [...activeEventKey, eventKey];\n        }\n      } else {\n        // activeEventKey is undefined.\n        eventKeyPassed = [eventKey];\n      }\n    }\n    onSelect == null ? void 0 : onSelect(eventKeyPassed, e);\n    onClick == null ? void 0 : onClick(e);\n  };\n}\n_s(useAccordionButton, \"6AyveHtjnf2YrGzF6hKjF1K8K8g=\");\nconst AccordionButton = /*#__PURE__*/_s2( /*#__PURE__*/React.forwardRef(_c = _s2(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'button',\n  bsPrefix,\n  className,\n  onClick,\n  ...props\n}, ref) => {\n  _s2();\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-button');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  const accordionOnClick = useAccordionButton(eventKey, onClick);\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  if (Component === 'button') {\n    props.type = 'button';\n  }\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    onClick: accordionOnClick,\n    ...props,\n    \"aria-expanded\": Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : eventKey === activeEventKey,\n    className: classNames(className, bsPrefix, !isAccordionItemSelected(activeEventKey, eventKey) && 'collapsed')\n  });\n}, \"QHddRZzZSqaWmW8pWWb1BxxAUG4=\", false, function () {\n  return [useBootstrapPrefix, useAccordionButton];\n})), \"QHddRZzZSqaWmW8pWWb1BxxAUG4=\", false, function () {\n  return [useBootstrapPrefix, useAccordionButton];\n});\n_c2 = AccordionButton;\nAccordionButton.displayName = 'AccordionButton';\nexport default AccordionButton;\nvar _c, _c2;\n$RefreshReg$(_c, \"AccordionButton$React.forwardRef\");\n$RefreshReg$(_c2, \"AccordionButton\");","map":{"version":3,"names":["React","useContext","classNames","AccordionContext","isAccordionItemSelected","AccordionItemContext","useBootstrapPrefix","jsx","_jsx","useAccordionButton","eventKey","onClick","_s","activeEventKey","onSelect","alwaysOpen","e","eventKeyPassed","Array","isArray","includes","filter","k","AccordionButton","_s2","forwardRef","_c","as","Component","bsPrefix","className","props","ref","accordionOnClick","type","_c2","displayName","$RefreshReg$"],"sources":["/home/bilal/ReactLabs/myportfolio/src/node_modules/react-bootstrap/esm/AccordionButton.js"],"sourcesContent":["import * as React from 'react';\nimport { useContext } from 'react';\nimport classNames from 'classnames';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport AccordionItemContext from './AccordionItemContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useAccordionButton(eventKey, onClick) {\n  const {\n    activeEventKey,\n    onSelect,\n    alwaysOpen\n  } = useContext(AccordionContext);\n  return e => {\n    /*\n      Compare the event key in context with the given event key.\n      If they are the same, then collapse the component.\n    */\n    let eventKeyPassed = eventKey === activeEventKey ? null : eventKey;\n    if (alwaysOpen) {\n      if (Array.isArray(activeEventKey)) {\n        if (activeEventKey.includes(eventKey)) {\n          eventKeyPassed = activeEventKey.filter(k => k !== eventKey);\n        } else {\n          eventKeyPassed = [...activeEventKey, eventKey];\n        }\n      } else {\n        // activeEventKey is undefined.\n        eventKeyPassed = [eventKey];\n      }\n    }\n    onSelect == null ? void 0 : onSelect(eventKeyPassed, e);\n    onClick == null ? void 0 : onClick(e);\n  };\n}\nconst AccordionButton = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'button',\n  bsPrefix,\n  className,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-button');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  const accordionOnClick = useAccordionButton(eventKey, onClick);\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  if (Component === 'button') {\n    props.type = 'button';\n  }\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    onClick: accordionOnClick,\n    ...props,\n    \"aria-expanded\": Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : eventKey === activeEventKey,\n    className: classNames(className, bsPrefix, !isAccordionItemSelected(activeEventKey, eventKey) && 'collapsed')\n  });\n});\nAccordionButton.displayName = 'AccordionButton';\nexport default AccordionButton;"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,QAAQ,OAAO;AAClC,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,gBAAgB,IAAIC,uBAAuB,QAAQ,oBAAoB;AAC9E,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD,SAASC,kBAAkB,QAAQ,iBAAiB;AACpD,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,OAAO,SAASC,kBAAkBA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EAAAC,EAAA;EACpD,MAAM;IACJC,cAAc;IACdC,QAAQ;IACRC;EACF,CAAC,GAAGd,UAAU,CAACE,gBAAgB,CAAC;EAChC,OAAOa,CAAC,IAAI;IACV;AACJ;AACA;AACA;IACI,IAAIC,cAAc,GAAGP,QAAQ,KAAKG,cAAc,GAAG,IAAI,GAAGH,QAAQ;IAClE,IAAIK,UAAU,EAAE;MACd,IAAIG,KAAK,CAACC,OAAO,CAACN,cAAc,CAAC,EAAE;QACjC,IAAIA,cAAc,CAACO,QAAQ,CAACV,QAAQ,CAAC,EAAE;UACrCO,cAAc,GAAGJ,cAAc,CAACQ,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKZ,QAAQ,CAAC;QAC7D,CAAC,MAAM;UACLO,cAAc,GAAG,CAAC,GAAGJ,cAAc,EAAEH,QAAQ,CAAC;QAChD;MACF,CAAC,MAAM;QACL;QACAO,cAAc,GAAG,CAACP,QAAQ,CAAC;MAC7B;IACF;IACAI,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACG,cAAc,EAAED,CAAC,CAAC;IACvDL,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACK,CAAC,CAAC;EACvC,CAAC;AACH;AAACJ,EAAA,CA3BeH,kBAAkB;AA4BlC,MAAMc,eAAe,GAAG,aAAAC,GAAA,eAAaxB,KAAK,CAACyB,UAAU,CAAAC,EAAA,GAAAF,GAAA,CAAC,CAAC;EACrD;EACAG,EAAE,EAAEC,SAAS,GAAG,QAAQ;EACxBC,QAAQ;EACRC,SAAS;EACTnB,OAAO;EACP,GAAGoB;AACL,CAAC,EAAEC,GAAG,KAAK;EAAAR,GAAA;EACTK,QAAQ,GAAGvB,kBAAkB,CAACuB,QAAQ,EAAE,kBAAkB,CAAC;EAC3D,MAAM;IACJnB;EACF,CAAC,GAAGT,UAAU,CAACI,oBAAoB,CAAC;EACpC,MAAM4B,gBAAgB,GAAGxB,kBAAkB,CAACC,QAAQ,EAAEC,OAAO,CAAC;EAC9D,MAAM;IACJE;EACF,CAAC,GAAGZ,UAAU,CAACE,gBAAgB,CAAC;EAChC,IAAIyB,SAAS,KAAK,QAAQ,EAAE;IAC1BG,KAAK,CAACG,IAAI,GAAG,QAAQ;EACvB;EACA,OAAO,aAAa1B,IAAI,CAACoB,SAAS,EAAE;IAClCI,GAAG,EAAEA,GAAG;IACRrB,OAAO,EAAEsB,gBAAgB;IACzB,GAAGF,KAAK;IACR,eAAe,EAAEb,KAAK,CAACC,OAAO,CAACN,cAAc,CAAC,GAAGA,cAAc,CAACO,QAAQ,CAACV,QAAQ,CAAC,GAAGA,QAAQ,KAAKG,cAAc;IAChHiB,SAAS,EAAE5B,UAAU,CAAC4B,SAAS,EAAED,QAAQ,EAAE,CAACzB,uBAAuB,CAACS,cAAc,EAAEH,QAAQ,CAAC,IAAI,WAAW;EAC9G,CAAC,CAAC;AACJ,CAAC;EAAA,QAlBYJ,kBAAkB,EAIJG,kBAAkB;AAAA,EAc5C,CAAC;EAAA,QAlBWH,kBAAkB,EAIJG,kBAAkB;AAAA,EAc3C;AAAC0B,GAAA,GA1BGZ,eAAe;AA2BrBA,eAAe,CAACa,WAAW,GAAG,iBAAiB;AAC/C,eAAeb,eAAe;AAAC,IAAAG,EAAA,EAAAS,GAAA;AAAAE,YAAA,CAAAX,EAAA;AAAAW,YAAA,CAAAF,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}