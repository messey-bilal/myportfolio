{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useContext, useCallback } from 'react';\nimport * as React from 'react';\nimport { useSSRSafeId } from './ssr';\nimport DropdownContext from './DropdownContext';\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const isRoleMenu = el => {\n  var _el$getAttribute;\n  return ((_el$getAttribute = el.getAttribute('role')) == null ? void 0 : _el$getAttribute.toLowerCase()) === 'menu';\n};\nconst noop = () => {};\n\n/**\n * Wires up Dropdown toggle functionality, returning a set a props to attach\n * to the element that functions as the dropdown toggle (generally a button).\n *\n * @memberOf Dropdown\n */\nexport function useDropdownToggle() {\n  _s();\n  const id = useSSRSafeId();\n  const {\n    show = false,\n    toggle = noop,\n    setToggle,\n    menuElement\n  } = useContext(DropdownContext) || {};\n  const handleClick = useCallback(e => {\n    toggle(!show, e);\n  }, [show, toggle]);\n  const props = {\n    id,\n    ref: setToggle || noop,\n    onClick: handleClick,\n    'aria-expanded': !!show\n  };\n\n  // This is maybe better down in an effect, but\n  // the component is going to update anyway when the menu element\n  // is set so might return new props.\n  if (menuElement && isRoleMenu(menuElement)) {\n    props['aria-haspopup'] = true;\n  }\n  return [props, {\n    show,\n    toggle\n  }];\n}\n/**\n * Also exported as `<Dropdown.Toggle>` from `Dropdown`.\n *\n * @displayName DropdownToggle\n * @memberOf Dropdown\n */\n_s(useDropdownToggle, \"Gp4aMzzvTDlCvYp0CfEhQo/EEUk=\", false, function () {\n  return [useSSRSafeId];\n});\nfunction DropdownToggle({\n  children\n}) {\n  _s2();\n  const [props, meta] = useDropdownToggle();\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: children(props, meta)\n  });\n}\n_s2(DropdownToggle, \"Kc5SIWIKV3ati3xo9tRRb6y9lDI=\", false, function () {\n  return [useDropdownToggle];\n});\n_c = DropdownToggle;\nDropdownToggle.displayName = 'DropdownToggle';\n\n/** @component */\nexport default DropdownToggle;\nvar _c;\n$RefreshReg$(_c, \"DropdownToggle\");","map":{"version":3,"names":["useContext","useCallback","React","useSSRSafeId","DropdownContext","Fragment","_Fragment","jsx","_jsx","isRoleMenu","el","_el$getAttribute","getAttribute","toLowerCase","noop","useDropdownToggle","_s","id","show","toggle","setToggle","menuElement","handleClick","e","props","ref","onClick","DropdownToggle","children","_s2","meta","_c","displayName","$RefreshReg$"],"sources":["/home/bilal/ReactLabs/myportfolio/src/node_modules/@restart/ui/esm/DropdownToggle.js"],"sourcesContent":["import { useContext, useCallback } from 'react';\nimport * as React from 'react';\nimport { useSSRSafeId } from './ssr';\nimport DropdownContext from './DropdownContext';\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const isRoleMenu = el => {\n  var _el$getAttribute;\n  return ((_el$getAttribute = el.getAttribute('role')) == null ? void 0 : _el$getAttribute.toLowerCase()) === 'menu';\n};\nconst noop = () => {};\n\n/**\n * Wires up Dropdown toggle functionality, returning a set a props to attach\n * to the element that functions as the dropdown toggle (generally a button).\n *\n * @memberOf Dropdown\n */\nexport function useDropdownToggle() {\n  const id = useSSRSafeId();\n  const {\n    show = false,\n    toggle = noop,\n    setToggle,\n    menuElement\n  } = useContext(DropdownContext) || {};\n  const handleClick = useCallback(e => {\n    toggle(!show, e);\n  }, [show, toggle]);\n  const props = {\n    id,\n    ref: setToggle || noop,\n    onClick: handleClick,\n    'aria-expanded': !!show\n  };\n\n  // This is maybe better down in an effect, but\n  // the component is going to update anyway when the menu element\n  // is set so might return new props.\n  if (menuElement && isRoleMenu(menuElement)) {\n    props['aria-haspopup'] = true;\n  }\n  return [props, {\n    show,\n    toggle\n  }];\n}\n/**\n * Also exported as `<Dropdown.Toggle>` from `Dropdown`.\n *\n * @displayName DropdownToggle\n * @memberOf Dropdown\n */\nfunction DropdownToggle({\n  children\n}) {\n  const [props, meta] = useDropdownToggle();\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: children(props, meta)\n  });\n}\nDropdownToggle.displayName = 'DropdownToggle';\n\n/** @component */\nexport default DropdownToggle;"],"mappings":";;AAAA,SAASA,UAAU,EAAEC,WAAW,QAAQ,OAAO;AAC/C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,YAAY,QAAQ,OAAO;AACpC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,SAASC,QAAQ,IAAIC,SAAS,QAAQ,mBAAmB;AACzD,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,OAAO,MAAMC,UAAU,GAAGC,EAAE,IAAI;EAC9B,IAAIC,gBAAgB;EACpB,OAAO,CAAC,CAACA,gBAAgB,GAAGD,EAAE,CAACE,YAAY,CAAC,MAAM,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGD,gBAAgB,CAACE,WAAW,CAAC,CAAC,MAAM,MAAM;AACpH,CAAC;AACD,MAAMC,IAAI,GAAGA,CAAA,KAAM,CAAC,CAAC;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAClC,MAAMC,EAAE,GAAGd,YAAY,CAAC,CAAC;EACzB,MAAM;IACJe,IAAI,GAAG,KAAK;IACZC,MAAM,GAAGL,IAAI;IACbM,SAAS;IACTC;EACF,CAAC,GAAGrB,UAAU,CAACI,eAAe,CAAC,IAAI,CAAC,CAAC;EACrC,MAAMkB,WAAW,GAAGrB,WAAW,CAACsB,CAAC,IAAI;IACnCJ,MAAM,CAAC,CAACD,IAAI,EAAEK,CAAC,CAAC;EAClB,CAAC,EAAE,CAACL,IAAI,EAAEC,MAAM,CAAC,CAAC;EAClB,MAAMK,KAAK,GAAG;IACZP,EAAE;IACFQ,GAAG,EAAEL,SAAS,IAAIN,IAAI;IACtBY,OAAO,EAAEJ,WAAW;IACpB,eAAe,EAAE,CAAC,CAACJ;EACrB,CAAC;;EAED;EACA;EACA;EACA,IAAIG,WAAW,IAAIZ,UAAU,CAACY,WAAW,CAAC,EAAE;IAC1CG,KAAK,CAAC,eAAe,CAAC,GAAG,IAAI;EAC/B;EACA,OAAO,CAACA,KAAK,EAAE;IACbN,IAAI;IACJC;EACF,CAAC,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AALAH,EAAA,CA7BgBD,iBAAiB;EAAA,QACpBZ,YAAY;AAAA;AAkCzB,SAASwB,cAAcA,CAAC;EACtBC;AACF,CAAC,EAAE;EAAAC,GAAA;EACD,MAAM,CAACL,KAAK,EAAEM,IAAI,CAAC,GAAGf,iBAAiB,CAAC,CAAC;EACzC,OAAO,aAAaP,IAAI,CAACF,SAAS,EAAE;IAClCsB,QAAQ,EAAEA,QAAQ,CAACJ,KAAK,EAAEM,IAAI;EAChC,CAAC,CAAC;AACJ;AAACD,GAAA,CAPQF,cAAc;EAAA,QAGCZ,iBAAiB;AAAA;AAAAgB,EAAA,GAHhCJ,cAAc;AAQvBA,cAAc,CAACK,WAAW,GAAG,gBAAgB;;AAE7C;AACA,eAAeL,cAAc;AAAC,IAAAI,EAAA;AAAAE,YAAA,CAAAF,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}