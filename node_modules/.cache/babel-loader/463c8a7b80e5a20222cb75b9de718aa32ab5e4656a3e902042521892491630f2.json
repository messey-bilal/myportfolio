{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMemo, useRef } from 'react';\nimport hasClass from 'dom-helpers/hasClass';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Popover from './Popover';\nimport Tooltip from './Tooltip';\n\n// This is meant for internal use.\n// This applies a custom offset to the overlay if it's a popover or tooltip.\nexport default function useOverlayOffset(customOffset) {\n  _s();\n  const overlayRef = useRef(null);\n  const popoverClass = useBootstrapPrefix(undefined, 'popover');\n  const tooltipClass = useBootstrapPrefix(undefined, 'tooltip');\n  const offset = useMemo(() => ({\n    name: 'offset',\n    options: {\n      offset: () => {\n        if (customOffset) {\n          return customOffset;\n        }\n        if (overlayRef.current) {\n          if (hasClass(overlayRef.current, popoverClass)) {\n            return Popover.POPPER_OFFSET;\n          }\n          if (hasClass(overlayRef.current, tooltipClass)) {\n            return Tooltip.TOOLTIP_OFFSET;\n          }\n        }\n        return [0, 0];\n      }\n    }\n  }), [customOffset, popoverClass, tooltipClass]);\n  return [overlayRef, [offset]];\n}\n_s(useOverlayOffset, \"rmyeNLcUMHtNXEq1KpMvk+Op6xs=\", false, function () {\n  return [useBootstrapPrefix, useBootstrapPrefix];\n});","map":{"version":3,"names":["useMemo","useRef","hasClass","useBootstrapPrefix","Popover","Tooltip","useOverlayOffset","customOffset","_s","overlayRef","popoverClass","undefined","tooltipClass","offset","name","options","current","POPPER_OFFSET","TOOLTIP_OFFSET"],"sources":["/home/bilal/ReactLabs/myportfolio/src/node_modules/react-bootstrap/esm/useOverlayOffset.js"],"sourcesContent":["import { useMemo, useRef } from 'react';\nimport hasClass from 'dom-helpers/hasClass';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Popover from './Popover';\nimport Tooltip from './Tooltip';\n\n// This is meant for internal use.\n// This applies a custom offset to the overlay if it's a popover or tooltip.\nexport default function useOverlayOffset(customOffset) {\n  const overlayRef = useRef(null);\n  const popoverClass = useBootstrapPrefix(undefined, 'popover');\n  const tooltipClass = useBootstrapPrefix(undefined, 'tooltip');\n  const offset = useMemo(() => ({\n    name: 'offset',\n    options: {\n      offset: () => {\n        if (customOffset) {\n          return customOffset;\n        }\n        if (overlayRef.current) {\n          if (hasClass(overlayRef.current, popoverClass)) {\n            return Popover.POPPER_OFFSET;\n          }\n          if (hasClass(overlayRef.current, tooltipClass)) {\n            return Tooltip.TOOLTIP_OFFSET;\n          }\n        }\n        return [0, 0];\n      }\n    }\n  }), [customOffset, popoverClass, tooltipClass]);\n  return [overlayRef, [offset]];\n}"],"mappings":";AAAA,SAASA,OAAO,EAAEC,MAAM,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,SAASC,kBAAkB,QAAQ,iBAAiB;AACpD,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,OAAO,MAAM,WAAW;;AAE/B;AACA;AACA,eAAe,SAASC,gBAAgBA,CAACC,YAAY,EAAE;EAAAC,EAAA;EACrD,MAAMC,UAAU,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAMS,YAAY,GAAGP,kBAAkB,CAACQ,SAAS,EAAE,SAAS,CAAC;EAC7D,MAAMC,YAAY,GAAGT,kBAAkB,CAACQ,SAAS,EAAE,SAAS,CAAC;EAC7D,MAAME,MAAM,GAAGb,OAAO,CAAC,OAAO;IAC5Bc,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAE;MACPF,MAAM,EAAEA,CAAA,KAAM;QACZ,IAAIN,YAAY,EAAE;UAChB,OAAOA,YAAY;QACrB;QACA,IAAIE,UAAU,CAACO,OAAO,EAAE;UACtB,IAAId,QAAQ,CAACO,UAAU,CAACO,OAAO,EAAEN,YAAY,CAAC,EAAE;YAC9C,OAAON,OAAO,CAACa,aAAa;UAC9B;UACA,IAAIf,QAAQ,CAACO,UAAU,CAACO,OAAO,EAAEJ,YAAY,CAAC,EAAE;YAC9C,OAAOP,OAAO,CAACa,cAAc;UAC/B;QACF;QACA,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;MACf;IACF;EACF,CAAC,CAAC,EAAE,CAACX,YAAY,EAAEG,YAAY,EAAEE,YAAY,CAAC,CAAC;EAC/C,OAAO,CAACH,UAAU,EAAE,CAACI,MAAM,CAAC,CAAC;AAC/B;AAACL,EAAA,CAxBuBF,gBAAgB;EAAA,QAEjBH,kBAAkB,EAClBA,kBAAkB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}