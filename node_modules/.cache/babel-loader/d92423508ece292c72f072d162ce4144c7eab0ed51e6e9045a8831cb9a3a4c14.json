{"ast":null,"code":"var _s = $RefreshSig$();\nimport * as React from 'react';\nimport { useEffect, useMemo, useRef, useCallback } from 'react';\nimport classNames from 'classnames';\nimport useTimeout from '@restart/hooks/useTimeout';\nimport ToastFade from './ToastFade';\nimport ToastHeader from './ToastHeader';\nimport ToastBody from './ToastBody';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport ToastContext from './ToastContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Toast = /*#__PURE__*/_s( /*#__PURE__*/React.forwardRef(_c = _s(({\n  bsPrefix,\n  className,\n  transition: Transition = ToastFade,\n  show = true,\n  animation = true,\n  delay = 5000,\n  autohide = false,\n  onClose,\n  bg,\n  ...props\n}, ref) => {\n  _s();\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'toast');\n\n  // We use refs for these, because we don't want to restart the autohide\n  // timer in case these values change.\n  const delayRef = useRef(delay);\n  const onCloseRef = useRef(onClose);\n  useEffect(() => {\n    delayRef.current = delay;\n    onCloseRef.current = onClose;\n  }, [delay, onClose]);\n  const autohideTimeout = useTimeout();\n  const autohideToast = !!(autohide && show);\n  const autohideFunc = useCallback(() => {\n    if (autohideToast) {\n      onCloseRef.current == null ? void 0 : onCloseRef.current();\n    }\n  }, [autohideToast]);\n  useEffect(() => {\n    // Only reset timer if show or autohide changes.\n    autohideTimeout.set(autohideFunc, delayRef.current);\n  }, [autohideTimeout, autohideFunc]);\n  const toastContext = useMemo(() => ({\n    onClose\n  }), [onClose]);\n  const hasAnimation = !!(Transition && animation);\n  const toast = /*#__PURE__*/_jsx(\"div\", {\n    ...props,\n    ref: ref,\n    className: classNames(bsPrefix, className, bg && `bg-${bg}`, !hasAnimation && (show ? 'show' : 'hide')),\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\"\n  });\n  return /*#__PURE__*/_jsx(ToastContext.Provider, {\n    value: toastContext,\n    children: hasAnimation && Transition ? /*#__PURE__*/_jsx(Transition, {\n      in: show,\n      unmountOnExit: true,\n      children: toast\n    }) : toast\n  });\n}, \"Dy0Nlu+bGHMhQSGdHeM4LReU3tM=\", false, function () {\n  return [useBootstrapPrefix, useTimeout];\n})), \"Dy0Nlu+bGHMhQSGdHeM4LReU3tM=\", false, function () {\n  return [useBootstrapPrefix, useTimeout];\n});\n_c2 = Toast;\nToast.displayName = 'Toast';\nexport default _c3 = Object.assign(Toast, {\n  Body: ToastBody,\n  Header: ToastHeader\n});\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Toast$React.forwardRef\");\n$RefreshReg$(_c2, \"Toast\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"names":["React","useEffect","useMemo","useRef","useCallback","classNames","useTimeout","ToastFade","ToastHeader","ToastBody","useBootstrapPrefix","ToastContext","jsx","_jsx","Toast","_s","forwardRef","_c","bsPrefix","className","transition","Transition","show","animation","delay","autohide","onClose","bg","props","ref","delayRef","onCloseRef","current","autohideTimeout","autohideToast","autohideFunc","set","toastContext","hasAnimation","toast","role","Provider","value","children","in","unmountOnExit","_c2","displayName","_c3","Object","assign","Body","Header","$RefreshReg$"],"sources":["/home/bilal/ReactLabs/myportfolio/src/node_modules/react-bootstrap/esm/Toast.js"],"sourcesContent":["import * as React from 'react';\nimport { useEffect, useMemo, useRef, useCallback } from 'react';\nimport classNames from 'classnames';\nimport useTimeout from '@restart/hooks/useTimeout';\nimport ToastFade from './ToastFade';\nimport ToastHeader from './ToastHeader';\nimport ToastBody from './ToastBody';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport ToastContext from './ToastContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Toast = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  transition: Transition = ToastFade,\n  show = true,\n  animation = true,\n  delay = 5000,\n  autohide = false,\n  onClose,\n  bg,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'toast');\n\n  // We use refs for these, because we don't want to restart the autohide\n  // timer in case these values change.\n  const delayRef = useRef(delay);\n  const onCloseRef = useRef(onClose);\n  useEffect(() => {\n    delayRef.current = delay;\n    onCloseRef.current = onClose;\n  }, [delay, onClose]);\n  const autohideTimeout = useTimeout();\n  const autohideToast = !!(autohide && show);\n  const autohideFunc = useCallback(() => {\n    if (autohideToast) {\n      onCloseRef.current == null ? void 0 : onCloseRef.current();\n    }\n  }, [autohideToast]);\n  useEffect(() => {\n    // Only reset timer if show or autohide changes.\n    autohideTimeout.set(autohideFunc, delayRef.current);\n  }, [autohideTimeout, autohideFunc]);\n  const toastContext = useMemo(() => ({\n    onClose\n  }), [onClose]);\n  const hasAnimation = !!(Transition && animation);\n  const toast = /*#__PURE__*/_jsx(\"div\", {\n    ...props,\n    ref: ref,\n    className: classNames(bsPrefix, className, bg && `bg-${bg}`, !hasAnimation && (show ? 'show' : 'hide')),\n    role: \"alert\",\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\"\n  });\n  return /*#__PURE__*/_jsx(ToastContext.Provider, {\n    value: toastContext,\n    children: hasAnimation && Transition ? /*#__PURE__*/_jsx(Transition, {\n      in: show,\n      unmountOnExit: true,\n      children: toast\n    }) : toast\n  });\n});\nToast.displayName = 'Toast';\nexport default Object.assign(Toast, {\n  Body: ToastBody,\n  Header: ToastHeader\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}